${ADMIN_PANEL}

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: ${ENVOY_PORT} }
      filter_chains:
        - filters:
            - name: envoy.http_connection_manager
              config:
                codec_type: auto
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: buskit
                            max_grpc_timeout: 0s
                      cors:
                        allow_origin_string_match:
                          - safe_regex:
                              google_re2: {}
                              regex: \*
                        allow_credentials: true
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,cookie,set-cookie,grpc-stream-support
                        max_age: "1728000"
                        expose_headers: grpc-status,grpc-message,set-cookie,cookie,grpc-stream-support
                http_filters:
                  - name: envoy.grpc_web
                  # конвертируем headers, которые пришли с фронта в metadata для бэкенда
                  - name: envoy.filters.http.header_to_metadata
                    config:
                      request_rules:
                      - header: grpc-stream-support
                        remove: false
                        on_header_present:
                          metadata_namespace: envoy.lb
                          key: grpc-stream-support
                          type: STRING
                        on_header_missing:
                          metadata_namespace: envoy.lb
                          key: grpc-stream-support
                          value: 'no stream'
                          type: STRING
                  - name: envoy.cors
                  # конвертируем metadata с бэкенда в headers, для того, чтобы проставлять куки авторизации
                  - name: envoy.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
                      inline_code: |
                        function envoy_on_response(handler)
                            local shouldSetHeaders = true
                            for key, value in pairs(handler:streamInfo():dynamicMetadata()) do
                                for key1, value1 in pairs(value) do
                                    if key1 == 'grpc-stream-support' and value1 ~= 'no stream' then
                                        handler:logWarn('STREAM DETECTED')
                                        shouldSetHeaders = false
                                    end
                                end
                            end

                            if shouldSetHeaders then
                                local body = handler:body()
                                if handler:trailers() ~= nil then
                                    for key, value in pairs(handler:trailers()) do
                                        if handler:headers():get(key) == nil then
                                            handler:headers():add(key, tostring(value))
                                        end
                                    end
                                end
                            end
                        end
                  - name: envoy.router
  clusters:
    - name: buskit
      connect_timeout: 2s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      lb_subset_config:
        fallback_policy: ANY_ENDPOINT
        subset_selectors:
          - keys:
              - set-cookie
          - keys:
              - version
      hosts: [{ socket_address: { address: ${BACKEND_HOST}, port_value: ${BACKEND_PORT} }}]
